========================================================================
Project Name: Online Shipping Management System (OSMS)
Author: Sherwin John C. Tragura
Description: This prototype is a web-based application simulating a simple 
      and basic shipment process covering shipping, order, payment, and user modules. The main goal is to showcase the core features of Flask 3.x framework. 

      Instead of using the non-standard approach, this project uses the Application Factory function approach in building the project directory.

========================================================================

A. Project Directory

--- ch02-factory (main project directory)
   --- app - the application folder
           - contains all the modules and components of the application, such as:
   
           --- exceptions - contains the custom HTTPExceptions 
           --- model - contains the model classes
           --- pages - contains the Jinja templates for the contents and error pages
           --- repository - contains the database transactions using the native psycopg2 driver 
           --- services - contains other Python transactions that utilize the repository for 
                  generate the proper response
           --- resources - contains the static files (e.g., css, js, html, png)
           --- views - contains the Flask view functions showcasing different implementations 
               of managing request and response data
           --- __init__.py - the heart of the applications
                           - contains all the initialization, setups, and configurations
                           - creates the Flask instance and returns it to main.py

           --- main.py - the main module that imports the create_app() from app/__init__.py, event handlers,      application-level events

           --- generate_secret.py - contains a sample code for generating hash value for SECRET_KEY

           --- log_msg.txt.i - log files generated by the logger

B. Configuration files (choose only one)
    config_dev.toml - configuration variables written in TOML for development stage
    config_prod.toml - configuration variables written in TOML for production stage
    
C. Database Configurations
   db_dump - contains the sms.sql dump file, which contains dummy test data
           - database platform is PostgreSQL 

D. Dependencies
   --- Create a Python virtual env (e.g., ch02-env) using the venv module first before running the dependency file.
   --- requirements.txt - contains the updated modules just run it inside your venv directory using:
                          python -m pip install -r requirements.txt --upgrade

E. Running the application:
   This prototype uses a browser-based sessions for login authentication, so be sure to clear the session first
   before running the app.

   Run the command python main.py inside the enabled ch02-env.
