========================================================================
Project Name: Online Shipping Management System (OSMS)
Author: Sherwin John C. Tragura
Description: This prototype is a web-based application simulating a simple 
      and basic shipment process covering shipping, order, payment, and user modules. The main goal is to showcase the core features of Flask 3.x framework. 

      Instead of using the non-standard approach, this project uses the Blueprint approach in building the project directory.

========================================================================

A. Project Directory

--- ch02-blueprint (main project directory)
           --- modules - contains all the Blueprint modules and their respective components, 
                        such as pages, resources, views, repository, and services
                      - contains the model directory that has the model classes
   
           --- exceptions - contains the custom HTTPExceptions 
           --- pages - contains the Jinja templates for error pages
           --- tests - the pytest folder containing test files for testing Flask components in each Blueprint module

           --- main.py - the main module that imports the Blueprint modules and map it to a URL base context, contains all the initialization, setups, and configuratios, and creates the Flask instance for the application

           --- generate_secret.py - contains a sample code for generating hash value for SECRET_KEY

           --- log_msg.txt.i - log files generated by the logger

B. Configuration files 
    config.toml - configuration variables written in TOML for development stage
   
C. Database Configurations
   db_dump - contains the sms.sql dump file, which contains dummy test data
           - database platform is PostgreSQL 

D. Dependencies
   --- Create a Python virtual env (e.g., ch02-env) using the venv module first before running the dependency file.
   --- requirements.txt - contains the updated modules just run it inside your venv directory using:
                          python -m pip install -r requirements.txt --upgrade

E. Running the application:
   This prototype uses a browser-based sessions for login authentication, so be sure to clear the session first
   before running the app.

   Run the command python main.py inside the enabled ch02-env.
