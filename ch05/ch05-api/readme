========================================================================
Project Name: Online Voting System (OVS)
Author: Sherwin John C. Tragura
Description: This prototype is a bare and small-scale simulated online voting 
     system implemented using API components of Flask 3.x. The goal is to showcase the asynchronous side of Flask 3.x.
     This project uses the Application Factory design approach in managing the 
     project directories.
========================================================================

A. Project Directory
--- ch05-api (main project directory)
      --- app  - contains all the modules and their respective components, 
                        such API endpoint functions, repository, and services
               - contains the model directory that contains database 
                 configuration and model classes
               - contains custom exception classes
               - contains the __init__.py file which is the heart of the
                 application
      --- migrations - contains alembic and all Flask-Migration related files

      --- tests - contains the PyTest files for testing some components
      --- main.py - imports the create_app() from app/__init__.py, enables the
                    exception handlers, and implements globale events
      --- log_msg.txt.(i) - the log files generated by the logger

B. Configuration files 
    --- config_dev.toml - configuration variables written in TOML for development stage

    --- celery_app.py - provides the Celery instance
    --- celery_config.py - provides the Celery configuration with the Flask instance
    --- manage.py - provides the Flask-Migrate implementation and setup
    
C. Database Configurations
   db_dump - contains the ovs.sql dump file, which contains dummy test data
           - database platform is PostgreSQL 

D. Dependencies
   --- Create a Python virtual env (e.g., ch05-env) using the venv module first before running the dependency files
   --- requirements.txt - contains the updated modules just run it inside your venv directory using:
                  python -m pip install -r requirements.txt --upgrade

E. Running the application:
   --- Generate first the PostgreSQL table schema using the following Flask-Migrate commands:
         1. python -m flask --app manage.py db init
         2. python -m flask --app manage.py db migrate -m "Initial migration."
         3. python -m flask --app manage.py db upgrade
            python -m flask --app manage.py db downgrade (if schema needs update but modify the run_migrations_****() in env.py if necessary)
         4. (optional) python -m flask --app manage.py db histort 
         5. (optional) python -m flask --app manage.py db stamp head
   --- Run the Redis server first
   --- Open a new terminal in VS Code and using the ch05-env, run Celery at least using this command:
         celery -A main.celery_app worker --loglevel=info -P solo

   --- Run the command python main.py inside the enabled ch05-env.
