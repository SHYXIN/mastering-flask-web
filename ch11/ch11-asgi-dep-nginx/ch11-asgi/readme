========================================================================
Project Name: Online Grocery Application (OGA)
Author: Sherwin John C. Tragura
Description: This prototype is a small-scale API-based e-commerce application 
       for a grocery store. It has the typical ordering, purchasing, inventory, 
       and user management modules.

      The application will run on a Dockerized environment with PostgreSQL and 
      Peewee ORM. 
      The main goal is to use Kubernetes to deploy the applications using 
      Docker images.

      The application uses the Blueprint and Application Factory design approaches in managing its source codes and directories..
========================================================================

A. Project Directory
--- ch11-asgi (main project directory)
      --- app  - contains all the modules and their respective components, 
                        such API endpoint functions, repository, and services
               - contains the model directory that contains database 
                 configuration and model classes of the Peewee ORM
               - contains the __init__.py file which is the heart of the
                 application
      --- migrations - contains alembic and all Peewee-Migrations related files

      --- main.py - imports the create_app() from app/__init__.py, uses asyncio to create an event loop 
                    for Peewee transactions, and creates the ASGI container for the application

B. Configuration files 
    --- config_dev.toml - configuration variables written in TOML for development stage
    --- Dockerfile - Docker image configuration for ch11-asgi and the command to run the app 
                      asynchronously using Gunicorn and UvicornWorker
    --- /ch11-asgi-dep-nginx/db.env - database details for PostgreSQL image connectivity
    --- /ch11-asgi-deployment/docker-compose.yaml - the Docker Compose deployment file
    --- migrations.json - a migration file generated by Peewee-Migrations module
    --- /ch11-asgi-deployment/nginx - the nginx Docker configuration
    
    
C. Database Configurations
   --- /ch11-asgi-deployment/ogs.sql - contains the ogs.sql dump file, which contains dummy test data
           - database platform is PostgreSQL image

D. Dependencies
   --- Create a Python virtual env (e.g., ch11-asgi-env) using the venv module first before running the dependency files
   --- requirements.txt - contains the updated modules just run it inside your venv directory using:
                  python -m pip install -r requirements.txt

   

E. Running the application:
   --- Generate first the PostgreSQL table schema using the following Peewee-Migrations commands:
         1. pem init
         2. pem add app.models.db.Login
            pem add app.models.db.Administrator
            pem add app.models.db.Category
            ...
            ...
         2. pem watch
         3. pem migrate
          
   --- Deploy the ch11-asgi app to Docker image
       Deploy PostgreSQL image and run the script file.
       Run the application using the docker-compose up command